"use client";

import React, { useEffect, useState } from "react";
import "./Form.scss";

export default function Form() {
  const [selectedDate, setSelectedDate] = useState("");
  const [selectedTime, setSelectedTime] = useState("");
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    vin: "",
  });  

  // –§–æ—Ä–º–∞—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è min
  const now = new Date();
  const yyyyToday = now.getFullYear();
  const mmToday = String(now.getMonth() + 1).padStart(2, "0");
  const ddToday = String(now.getDate()).padStart(2, "0");
  const todayString = `${yyyyToday}-${mmToday}-${ddToday}`;

  useEffect(() => {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ 10:00
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    const yyyy = tomorrow.getFullYear();
    const mm = String(tomorrow.getMonth() + 1).padStart(2, "0");
    const dd = String(tomorrow.getDate()).padStart(2, "0");
    setSelectedDate(`${yyyy}-${mm}-${dd}`);
    setSelectedTime("10:00");
  }, []);

  const validatePhone = (phone) => {
    const cleaned = phone.replace(/[\s()-]/g, "");
    if (cleaned.startsWith("+")) {
      return cleaned.length === 12;
    } else if (cleaned.startsWith("7") || cleaned.startsWith("8")) {
      return cleaned.length === 11;
    }
    return false;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
  
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if (selectedTime < "10:00" || selectedTime > "20:00") {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–∞ —Å 10:00 –¥–æ 20:00");
      return;
    }
  
    if (!formData.name || !formData.phone) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è.");
      return;
    }
  
    if (!validatePhone(formData.phone)) {
      alert("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
      return;
    }
  
    let message = `–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É:\n\n–ò–º—è: ${formData.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}`;
    if (formData.vin) message += `\nVIN: ${formData.vin}`;
    message += `\n–î–∞—Ç–∞: ${selectedDate}\n–í—Ä–µ–º—è: ${selectedTime}`;
  
    // üîë –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
    const TOKEN = "8284718697:AAFV_l6X0bdzKhyJ39SlNzAdszYp5ieKcNQ"; // –ø–æ–ª—É—á–∞–µ—à—å —É @BotFather
    const CHAT_ID = "-1002955332793"; // id —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã/—á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
    const URI_API = `https://api.telegram.org/bot${TOKEN}/sendMessage`;
  
    try {
      const response = await fetch(URI_API, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: message,
          parse_mode: "HTML",
        }),
      });
  
      if (response.ok) {
        alert("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram!");
        if (typeof ym !== "undefined") {
          ym(94203012, 'reachGoal', 'formSent');
        }
      } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.");
    }
  };  

  return (
    <>
      <div className="Form" id="Form">
        <img
          src="/images/contacts_green_car.jpg"
          alt="–§–æ–Ω ‚Äî –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
          className="bg-image"
        />
        <div className="right-blur-overlay" />

        <div className="ContactFormSection">
          <h2>
            –û—Å—Ç–∞–≤—å –∑–∞—è–≤–∫—É, <br />
            –≤—ã–±—Ä–∞–≤ –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è
          </h2>

          <form className="form" onSubmit={handleSubmit}>
            <div className="form-row">
              <label htmlFor="name" className="form-label">
                –í–∞—à–µ –∏–º—è
              </label>
              <input
                type="text"
                id="name"
                name="name"
                className="form-input"
                placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω"
                value={formData.name}
                onChange={(e) =>
                  setFormData({ ...formData, name: e.target.value })
                }
              />
            </div>

            <div className="form-row">
              <label htmlFor="phone" className="form-label">
                –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω
              </label>
              <input
                type="tel"
                id="phone"
                name="phone"
                className="form-input"
                placeholder="+7 (9xx) xxx-xx-xx"
                value={formData.phone}
                onChange={(e) =>
                  setFormData({ ...formData, phone: e.target.value })
                }
              />
            </div>

            <div className="form-row">
              <label htmlFor="vin" className="form-label">
                –í–∞—à VIN-–Ω–æ–º–µ—Ä*
              </label>
              <input
                type="text"
                id="vin"
                name="vin"
                className="form-input"
                placeholder="–ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û"
                value={formData.vin}
                onChange={(e) =>
                  setFormData({ ...formData, vin: e.target.value })
                }
              />
            </div>

            <div className="form-row">
              <label htmlFor="datetime" className="form-label-1">
                –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
              </label>
              <div className="form-datetime">
                <input
                  type="date"
                  id="date"
                  name="date"
                  className="form-input"
                  value={selectedDate}
                  min={todayString}
                  onChange={(e) => setSelectedDate(e.target.value)}
                />
                <input
                  type="time"
                  id="time"
                  name="time"
                  className="form-input"
                  value={selectedTime}
                  step={60}
                  min="00:00"
                  max="23:59"
                  onChange={(e) => setSelectedTime(e.target.value)}
                />
              </div>
            </div>

            <button type="submit" className="form-button">
              –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
            </button>
          </form>

          <div className="contacts-info">
            <div className="contacts-info-block">
              <h2 className="title-contacts-info">–ê–¥—Ä–µ—Å</h2>
              <a
                href="https://yandex.ru/profile/1175654222?lang=ru"
                target="_blank"
              >
                –≥. –ú–æ—Å–∫–≤–∞
                <br />
                –í—ã—Å–æ–∫–æ–≤–æ–ª—å—Ç–Ω—ã–π –ø—Ä–æ–µ–∑–¥, –¥. 1, —Å—Ç—Ä. 29
              </a>
            </div>
            <div className="contacts-info-block">
              <h2 className="title-contacts-info">–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</h2>
              <p>
                –ü–Ω‚Äì–ü—Ç: 10:00‚Äì20:00
                <br />
                –°–±: 11:00‚Äì20:00
                <br />
                –í—Å: 11:00‚Äì18:00
              </p>
            </div>
            <div className="contacts-info-block">
              <h2 className="title-contacts-info">–¢–µ–ª–µ—Ñ–æ–Ω—ã</h2>
              <a href="tel:+74957676500" target="_blank">
               +7 495 76 76 500
              </a>
              <p>–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É</p>
            </div>
          </div>
        </div>
      </div>

      <div
        style={{ filter: "invert(0.9) hue-rotate(180deg)" }}
        className="yandex_map"
      >
        <iframe
          src="https://yandex.ru/map-widget/v1/?um=constructor%3A9cd8128f022d9c52582359f6749d3206589822ddbb5c480e49a54483a2093b0d&amp;source=constructor"
          width="100%"
          height="100%"
          frameBorder="0"
        ></iframe>
      </div>
    </>
  );
}